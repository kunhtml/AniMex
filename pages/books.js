import { useEffect, useState } from 'react';
import Header from '../components/Header';
import BookCard from '../components/BookCard';
import AnimatedButton from '../components/AnimatedButton';
import BlobChip from '../components/BlobChip';
import { fetchBooks } from '../lib/api';
import Link from 'next/link';

export default function BooksPage() {
  const [books, setBooks] = useState([]);
  const [q, setQ] = useState('');
  const [filter, setFilter] = useState('all');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    fetchBooks().then(data => {
      if (mounted) {
        setBooks(data || []);
        setLoading(false);
      }
    });
    return () => (mounted = false);
  }, []);

  const filtered = books.filter(b => {
    const matchesFilter = filter === 'all' ? true : (
      b.genre?.toLowerCase().includes(filter.toLowerCase()) ||
      (b.tags || []).some(tag => tag.toLowerCase().includes(filter.toLowerCase())) ||
      b.grade?.toLowerCase() === filter.toLowerCase()
    );
    const matchesQ = q.trim() === '' ? true : (
      b.title.toLowerCase().includes(q.toLowerCase()) ||
      b.author.toLowerCase().includes(q.toLowerCase()) ||
      b.genre?.toLowerCase().includes(q.toLowerCase())
    );
    return matchesFilter && matchesQ;
  });

  function getFilterLabel(filter) {
    const labels = {
      'all': 'T·∫•t c·∫£',
      'action': 'Action',
      'adventure': 'Adventure',
      'comedy': 'Comedy',
      'drama': 'Drama',
      'fantasy': 'Fantasy',
      'horror': 'Horror',
      'romance': 'Romance',
      'mystery': 'Mystery',
      'martial-arts': 'Martial Arts',
      'supernatural': 'Supernatural',
      'school-life': 'School Life',
      'slice-of-life': 'Slice of Life',
      'shounen': 'Shounen',
      'shoujo': 'Shoujo',
      'seinen': 'Seinen',
      'josei': 'Josei',
      'xuyen-khong': 'Xuy√™n Kh√¥ng',
      'chuyen-sinh': 'Chuy·ªÉn Sinh',
      'ngon-tinh': 'Ng√¥n T√¨nh',
      'co-dai': 'C·ªï ƒê·∫°i',
      'ecchi': 'Ecchi',
      'harem': 'Harem',
      'mecha': 'Mecha',
      'psychological': 'Psychological',
      'sci-fi': 'Sci-fi',
      'sports': 'Sports',
      'tragedy': 'Tragedy',
      'webtoon': 'Webtoon'
    };
    return labels[filter] || filter;
  }

  return (
    <>
      <Header q={q} onSearch={setQ} />
      <main className="container">
        <div className="page-header">
          <h1>·ªî Truy·ªán</h1>
          <p className="page-subtitle">N·ªÅn t·∫£ng ƒë·ªçc truy·ªán tr·ª±c tuy·∫øn mi·ªÖn ph√≠ h√†ng ƒë·∫ßu</p>
        </div>

        <section className="library-description">
          <div className="description-content">
            <div className="description-text">
              <h2>üåü Truy·ªán g·ª£i √Ω</h2>
              <p>
                Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ªî Truy·ªán - n·ªÅn t·∫£ng ƒë·ªçc truy·ªán tr·ª±c tuy·∫øn mi·ªÖn ph√≠ h√†ng ƒë·∫ßu. 
                Ch√∫ng t√¥i cung c·∫•p kho truy·ªán phong ph√∫ v·ªõi ƒë·ªß th·ªÉ lo·∫°i, t·ª´ ti√™n hi·ªáp, ki·∫øm hi·ªáp, ng√¥n t√¨nh 
                ƒë·∫øn truy·ªán ƒë√¥ th·ªã hi·ªán ƒë·∫°i hay huy·ªÅn huy·ªÖn k·ª≥ ·∫£o, lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t nhanh ch√≥ng v√† li√™n t·ª•c.
              </p>
              <div className="features-grid">
                <div className="feature-item">
                  <span className="feature-icon">üìö</span>
                  <div>
                    <h3>ƒêa d·∫°ng th·ªÉ lo·∫°i</h3>
                    <p>Action, Romance, Comedy, Fantasy, Drama, Mystery v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c</p>
                  </div>
                </div>
                <div className="feature-item">
                  <span className="feature-icon">üéØ</span>
                  <div>
                    <h3>Ph√¢n lo·∫°i theo th·ªÉ lo·∫°i</h3>
                    <p>Truy·ªán ƒë∆∞·ª£c t·ªï ch·ª©c theo th·ªÉ lo·∫°i, d·ªÖ d√†ng t√¨m ki·∫øm v√† ƒë·ªçc</p>
                  </div>
                </div>
                <div className="feature-item">
                  <span className="feature-icon">üí°</span>
                  <div>
                    <h3>N·ªôi dung ch·∫•t l∆∞·ª£ng</h3>
                    <p>ƒê∆∞·ª£c d·ªãch thu·∫≠t v√† bi√™n t·∫≠p b·ªüi c√°c nh√≥m d·ªãch chuy√™n nghi·ªáp</p>
                  </div>
                </div>
                <div className="feature-item">
                  <span className="feature-icon">üîç</span>
                  <div>
                    <h3>T√¨m ki·∫øm th√¥ng minh</h3>
                    <p>D·ªÖ d√†ng t√¨m truy·ªán theo t√™n, t√°c gi·∫£ ho·∫∑c th·ªÉ lo·∫°i</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="stats-section">
              <div className="stat-item">
                <span className="stat-number">{books.length}</span>
                <span className="stat-label">B·ªô truy·ªán</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">25+</span>
                <span className="stat-label">Th·ªÉ lo·∫°i</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">3</span>
                <span className="stat-label">Ngu·ªìn g·ªëc</span>
              </div>
            </div>
          </div>
        </section>

        <section className="controls" aria-label="B·ªô l·ªçc s√°ch">
          <div className="chips" role="list">
            {['all','action','adventure','comedy','drama','fantasy','horror','romance','mystery','martial-arts','supernatural','school-life','shounen','shoujo','seinen','xuyen-khong','chuyen-sinh','ngon-tinh','ecchi','harem','webtoon'].map(c => (
              <BlobChip
                key={c}
                active={filter === c}
                onClick={() => setFilter(c)}
              >
                {getFilterLabel(c)}
              </BlobChip>
            ))}
          </div>
        </section>

        <section className="books-section" aria-label="Danh s√°ch s√°ch">
          <div className="section-header">
            <h2>T·∫•t c·∫£ truy·ªán ({filtered.length})</h2>
            <AnimatedButton href="/" size="small" variant="secondary">
              V·ªÅ trang ch·ªß
            </AnimatedButton>
          </div>
          
          {loading ? (
            <div className="loading">
              <p>ƒêang t·∫£i truy·ªán...</p>
            </div>
          ) : (
            <div className="books-grid" role="list">
              {filtered.map(book => (
                <BookCard key={book.id} book={book} />
              ))}
              {filtered.length === 0 && (
                <div className="no-results">
                  <p>Kh√¥ng t√¨m th·∫•y truy·ªán ph√π h·ª£p.</p>
                  <AnimatedButton onClick={() => {setFilter('all'); setQ('')}} size="small">
                    Xem t·∫•t c·∫£
                  </AnimatedButton>
                </div>
              )}
            </div>
          )}
        </section>
      </main>
    </>
  );
}